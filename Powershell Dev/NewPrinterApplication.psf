<File version="3.1">
  <FileID>f6dfba5e-67d3-4a56-96b9-6180ee28c955</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAAEnQAABJ0Ad5mH3gAACxGSURBVHhe7d15cJx1nt9xaqqyqf1r/kkqSaWS
3dpkU7XJVmqmZmvZyiSZzQ6zw7K7w8zAcAzXYMxg7sNgm8vAgM1pwBy+wAe+ZMuyZOu+j5ZaLal1
3/fRrW51S7J1WBhYjk9+v0eWkaEBHxLG/r3fVa+yUHc/T/cjyr/v091qX0JERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREdAG383vf+17wT//0T4L33nNvcOWqR4MrVqwCAAAXgJUrVwUff/yJ4N//7KfBP/qj
fxU067r1zZnFv/2yy36qje/sUKCxR52ho2ofPGKMAwCA77iOIbtmjymvtFJ33nmXvv/97+vEEv/1
/cl//s/BDZu3q7F/XGVNAyqq61ExAAC4INh1u6iuV9VdMflr23T5zy8/vQHgrrvuCVaaM39f85DK
GvoAAMAFqLS+1zuZ37Zj9+kNAI8++niwb2RaJQ39KmsEAAAXolIzBLSGJrUvOfX0BoBVqx4N9kYm
zY0HVN4EAMDiq2geXHTf7v6+3cc3f19zfGYIaDMDwJ6kA6c/APRFp+RrSrwTAAAWkr91SKX1fSqp
6100ZQ39qjT78bfMKqlPfL2F4jMn0fZx2X3Zx5joOgvJO44n9jXHDgHt4QUdAOwOTlei2wMAMMsu
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
r0GlNS3mOiNme/b+mPvWF1JRSYUyCuy2KlXRFjG3mVRj95AKSkqVnleq/Opus/2jqq5vMNcpU2Fl
o0qCnQqaqdNfa/bZHvPuX9NAXGV+v9JzS7x3iAY7B1RmBov6/gnVt3eruKpddf1HTjkeAIBzY/8+
tyeISWYACJoTOL/9Da8vsG/utq+Te69/23e2fx0zLHzx9rMiqjaX24XfviEw2fzZaBZIuxDb7c6p
NyeXW5NytOb59dqw0Z71b01ow6btemL1S9qRkq/antFTtmHZZ5+LzcJvXzYoNOtQZnGDdzJcZR6j
9x4278+oOdEe06sbduuVdW9721z52FozyOww93FQOebk99HVr+j19Vv09oZtWvXEC2aAMSfWZlG3
A0a12Y7dlt1Oo9m2fZkhp6JdLeGJk8fX7nNw/F/ObAAYPvKBWTjtwjh+UvPQhDnrHlBJSYnKzBl3
aWmpyoyCgkIlpeZp74FsT3pWgXxlpWaCKlJ9t1mUB4/O284Rc+em1DY8bRxTa2j2shazcLcMntiP
/Xpo9vv267bIMbWFJ9VqtJgBYf62Wr3tzJq7jX0af+77rWaImN3O7D7tNuw/jdhs78e8fXrbCk+r
PTJ7G3ufZ29rB58J73Z2ePl83wCAc9Vs/g62i5T9YJ76Lvtr2vY9AV/m/ZqfOfO1v3L3dez1Et3e
/mp4sH1YydnVZlAIK8X82WROJANtp17P3j5ghoV9WZV6c1uq94mAb2z9stfeSdbmPZkqCnZ592v+
Niw7sJTWdCu9pElFNT3KNn/adce+J+5zI97wYH+P337K31s70rT7ULHs7/bb7zeYk0772f7vJGV7
l+1NL5N970Ct2bZ9FmD+tuzJc5YZNnL9HWatmzx5fBuNoaMfn8EAsGJlMHL0Q2/Bt4vqSXZB7Dc7
bu3x3lRX29prvu5VXVufmjpnNXf1qaGjz7tOrfm+fbr+lG0AAHCCPQm0J5tJhyvVZv7bnuzZf752
wQ1PqblvVPuz7EsEswNAb2xGrUOnXs+eILabk9TO6MyJ/zYngN/o1G1YXSMz8tf3K724yfu19pyy
FvXE57Y5Z/a29sTTXt/u09uv2f/cdTrMZZ0nL7Mnw+Zk9sR+Z/+c3Z/ddk5psxkA2s31Zk+IrWYj
PPmp9ialnMkA8NGJOzD3AE/s0Pxw2s2Z++mafbCnbgMAgDl2UTtc2Og9hV1gFrD8irYFV+Bv8z6O
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
9Y9Meev2ggwAc+xEAQAAvrvsoj+3bi/YAAAAAC4cZz0AtJsBwN4YAABceNqM6JkMAKtWrao7Lmlk
xjA3BAAAFx67+H9g1vODaRmnNwAsWXJbY3LKIe3Zm6zdAADggpWSelhPP/Ps6Q0ARERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERETfyS655P8DRb1Kp1C2XSsAAAAASUVORK5CYII=</Preview>
  <Form>qZ7d1xySWRAAACODCAAAAAAABADVll1v2jAUhu8n7T9YudhV1PJV0moQqUC7TStrR1h3iZzkFLw6NnKcAvv1
O0lA0JIupoyqExEi4bw+H3n8Jq1r/xcEOnbfvyOklZ8QvZhC2/IWsYbo6CcToZzFR5dSRfm3TYr+
ssktqJhJ0W4cVdKPTboJ14mCtoBEK8ptcpP4nAVfYTGU9yDavuPQk+CkWT2rN6ByemYRQSPMfIfr
9SkTFgkmjIcKQ62uFFpJHltZpVjrjZJTUHqx1JwnWnoB5dBjEYi0Dgw9tUnVaR2vQsukfRmC5V5i
plJNlzMQ2mO/UeA4ZzZpOPVSUZ+qMXblnthkeZRKvuG35a4GUhruaar0jYyZxgFYbhdrBOUFCqBc
O4S5ttxPioXEA6qCybbi4gEXXIZfSRquKxulp63jLGAVXU5TmrIj5wcHSmMeX87ztv5GVQEcIphI
ZblDObXJFdxpmwzYeLJNyLb0SgY0vw9Vxya1ioHEgJDnGHnUo4EqZ7dZxyS1bXQL8KD+FxHC3HIL
G9lEA+9HT87Ek5pGy8tPKDnOMTGHppNoLcXBmfGzNHsjszsszWa10Laep6WB9pMfxrRsdmcMS7WC
86ybcLyGpWoSnTnPBxpNPxpX9COGroymODOfQ7rAADChYmKMg1cJmC1xy+KEck8vOHRocN+VPLtx
z+g3GccHQHD/eI6j7Nq+ePeopqkJ3zKYHRzyEJONMdkDJhtAjKvEO7LOuZzhINVQnofhAGvEByjl
scn8N7Q94KBhR/nmNutIvA/RHg7dRK81Mds99lzBsA20A6DhteALY6yXLyUNfObUmyYtrTdrrZR6
yZNIfMaSQPVlgnsw3wYFrY2KY/8r97+YM/0y71/x+BL7ryNUtdPX8P+0v4O6v0lBuftfZPZvVs+b
8v50hv/G+V8V7e8JqMV+bKdeu7PJvhLZWXsHRdvonXn9YmNa0JtiOyu6FO6Nk9XP2P0DorOwVFkQ
AAA=</Form>
  <Code><![CDATA[#$des = 

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Item,
		[Parameter(Mandatory = $false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
		$InputObject,
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

#region Search Function
function SearchGrid()
{
	$RowIndex = 0
	$ColumnIndex = 0
	$seachString = $textboxSearch.Text
	
	if ($seachString -eq "")
	{
		return
	}
	
	if ($datagridviewResults.SelectedCells.Count -ne 0)
	{
		$startCell = $datagridviewResults.SelectedCells[0];
		$RowIndex = $startCell.RowIndex
		$ColumnIndex = $startCell.ColumnIndex + 1
	}
	
	$columnCount = $datagridviewResults.ColumnCount
	$rowCount = $datagridviewResults.RowCount
	for (; $RowIndex -lt $rowCount; $RowIndex++)
	{
		$Row = $datagridviewResults.Rows[$RowIndex]
		
		for (; $ColumnIndex -lt $columnCount; $ColumnIndex++)
		{
			$cell = $Row.Cells[$ColumnIndex]
			
			if ($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
			{
				$datagridviewResults.CurrentCell = $cell
				return
			}
		}
		
		$ColumnIndex = 0
	}
	
	$datagridviewResults.CurrentCell = $null
	[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.", "String not Found")
	
}
#endregion

$formMain_Load = {
	
	
	$d1 = Import-Csv "\\hqsbvnxfile1\global\Grlewis\Print Application\update.csv"
	Update-DataGridView -DataGridView $datagridviewResults -Item $d1 -AutoSizeColumns AllCells
}





$buttonExit_Click = {
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonQuery_Click = {
	#$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
}

$buttonSearch_Click = {
	#TODO: Place custom script here
	SearchGrid
}

$datagridviewResults_ColumnHeaderMouseClick = [System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if ($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if ($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}
		
		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
	
}

$textboxSearch_KeyDown = [System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if ($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
	{
		SearchGrid
		$_.SuppressKeyPress = $true
	}
}


$buttonInstallSelectedPrint_Click = {
	
	$selectedRow = $datagridviewResults.CurrentCell.Value
	$textbox1.Text = $selectedrow
	
	Add-Printer -ConnectionName "\\vmctxprn\$selectedRow"
	
	[System.Windows.Forms.MessageBox]::Show("$selectedRow has been installed. Press Okay to continue.")
}

$datagridviewResults_CellContentClick = [System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
	$selectedRow = $datagridviewResults.CurrentCell.Value
	$textbox1.Text = $selectedrow
	$selectedRow = $datagridviewResults.CurrentCell.Value
	$textbox2.Text = $selectedrow
}

$buttonRemoveSelectedPrinte_Click = {
	
	$selectedRow = $datagridviewResults.CurrentCell.Value
	$textbox1.Text = $selectedrow
	
	Get-WmiObject -Class Win32_Printer | Where-Object { $_.Network -eq $true -and ($_.Name -eq "\\vmctxprn\$selectedRow") } | ForEach-Object { $_.Delete() }
	
	[System.Windows.Forms.MessageBox]::Show("$selectedRow has been removed. Press Okay to continue.")
}


$buttonRequest_Click = {
	
	$MailTo4 = "Gabe Lewis <gabe.lewis@nghs.com>"
	$MailFrom = "Gabe Lewis <gabe.lewis@nghs.com>"
	$MailServer = "mail.nghs.com"
	$Subject = "R"
	$MsgBody = "EPIC PRINTER REQUEST FROM: "
	
	Send-MailMessage -To $MailTo4 -From $MailFrom -Subject $Subject -SMTPServer $MailServer -Body $MsgBody
	
}

$buttonEpicRequest_Click = {
	
	$phone = $textbox3.Text
	$printer = $textbox1.Text
	
	$MailTo4 = "Gabe Lewis <gabe.lewis@nghs.com>"
	$MailFrom = "EPIC PRINT REQUEST<gabe.lewis@nghs.com>"
	$MailServer = "mail.nghs.com"
	$Subject = "EPIC Printer Request"
	$MsgBody = "EPIC PRINTER REQUEST FROM: $env:USERNAME DEVICE: $env:COMPUTERNAME PRINTER: $printer PHONE: $phone "
	
	Send-MailMessage -To $MailTo4 -From $MailFrom -Subject $Subject -SMTPServer $MailServer -Body $MsgBody
	
	[System.Windows.Forms.MessageBox]::Show("Thank you for the Request $env:USERNAME. Printer $printer has been requested for $env:COMPUTERNAME .Pl to get this information entered in ServiceNow.")
	
}



$labelEnterPhoneNumberOrEx_Click = {
	#TODO: Place custom script here
	
	
}

$textbox3_TextChanged = {
	#TODO: Place custom script here
	
}

$textbox2_TextChanged = {
	#TODO: Place custom script here
	
}

$labelThisWillNOTFixEPICPr_Click = {
	#TODO: Place custom script here
	
}

$textbox1_TextChanged = {
	#TODO: Place custom script here
	
}

$textboxSearch_TextChanged = {
	#TODO: Place custom script here
	
}

$linklabelIfYouKnowTheIPOfTheP_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.LinkLabelLinkClickedEventArgs]
	#TODO: Place custom script here
	call-childform_psf
}

$labelIfYouNeedToPrintFrom_Click = {
	#TODO: Place custom script here
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>